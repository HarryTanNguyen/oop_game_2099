FIT 2099 Object-Oriented designs and implementations Assignment 1 design rationale Doors and keys* For doors and keys, we will be implementing this feature using the concept of inheritance. This is because walls, grounds share largely similar features albeit little differences. As such, we will make Grounds the super class and extends Walls, Floors and Doors from it. Walls have unique feature (attribute) of doors that Grounds do not have. Key is implemented as an instance of item class. Doors can be locked and unlocked via Boolean, where presence of a key can flip the Boolean flag. In our concept, each key is specific to one door only. Enemies* Given that an Actor class is currently present, we will simply extend the Enemy types as subclasses (Goons, Grunts, Doctor Maybe and Ninja) from the Actor class given that they all share similar attributes (i.e. hit points, has actions, name). In addition, each enemy class have their own specific characteristics, which we will just implement as methods and attributes.* For Goons, the ability to insult the player at 10% chance is likely to utilize the use of random (to be imported).* For Ninjas, since they only move when player is within a certain range (5 squares within), a collection variable should be made for Ninjas to store the 5 squares within their current location. A check can be launched at each round, checking if playerï¿½s location is in the collection. Random is also used in Ninja to allow generation of 50% chance of stun action. The stun action is launched by the execute function in Action class.*  For player, we will extend it from Actor class. The player class is largely different from all other classes extended from Actor class as this class is controlled by user and has to have relationships with all other extended actor subclasses (such as all the enemy subclasses and Q).* For Q, since it can only wander around and respond to players' interaction, there is not much special attributes to add. However, we are likely to utilize random here to generate random wandering of Q. We will not be allocating  behaviors to Q given that Q does not carry out active actions. However, Q does carry out two possible passive actions,  depending on the interaction with player. Hence, when player finds and interact with Q, we will use select one of  the two possible actions accordingly rather than making a behavior class specific to its actions. * For Doctor Maybe, since he is not going to move at all, in the construction of this character, we can pass in his location as a parameter and store as a static field that cannot be changed. Since his location is locked, doors and keys concept will be applied before player can enter and interact with Doctor Maybe.Rocket Building* For this feature, we will have another class called Rocket specifically meant for rocket building. Rocket class will be extended from the Item class. This class uses the logic of composite aggregation because in order to succeed building the rocket, the player needs all two components of the rocket.* Three objects will be created in total for this class, namely rocket plan, rocket engine and rocket body. The latter two is utilized in the composite aggregation idea. For rocket plan, it's assigned to Q at its initialization. * Launch pad is a feature in the rocket building concept as well, but it will be implemented as a specific location rather than a Rocket object.BehaviorWe also create "InsultBehavior" class and "stunBehaviour" classes. They implement the Action Factory class. Therefore, Goon can insult player and Ninjas can stun player.